#!/usr/bin/python3
from relib.arguments import Arguments
from relib.buildhelper import Environment
from rich import print

args = Arguments()
environ = Environment()

HELPMESSAGE = """
[bold magenta blink]üöÄ Reversium NinjaLinker v1.0 [/bold magenta blink]

[bold red]‚ö†Ô∏è Important Note:[/bold red] [bold yellow]Make sure to configure NinjaLinker before starting![/bold yellow]
[bold cyan underline]Available Commands:[/bold cyan underline]

[bold blue]üìÑ General Options:[/bold blue]
   [bold white]-h | --help[/bold white]: Show all available options and usage instructions.

[bold blue]üîç Session Management:[/bold blue]
   [bold green]currentsession[/bold green]: View details of the current running session.
   [bold green]startsession --session=[italic]<session_name>[/italic] --host=[italic]<hostname>[/italic] --network=[italic]True/False[/italic] --username=[italic]<username>[/italic][/bold green]: Start a new session with the specified parameters.
   [bold green]stopsession --session=[italic]re-session[/italic][/bold green]: Stop an existing session.

[bold blue]üñ•Ô∏è Shell Access:[/bold blue]
   [bold green]shell --session=[italic]<session_name>[/italic] --username=[italic]<username>[/italic][/bold green]: Establish an interactive shell connection.

[bold blue]üì° Command Tracing:[/bold blue]
   [bold green]trace --cmd=[italic]ls[/italic][/bold green]: Trace the specified command execution.

[bold yellow]üì• Download NinjaLinker from:[/bold yellow] [bold green underline]https://github.com/prasaanth2k/reversesium[/bold green underline]

[bold magenta]üîß Reverse Engineering made fun and easy![/bold magenta] üõ†Ô∏è
"""


def helpmessage():
    print(HELPMESSAGE)

if __name__ == "__main__":
    # to build the docker file with customizations
    if args.hasCommands(['build']):
        if args.hasOptions(['--tag']) and args.hasOptions(['--path']):
            environ.build(tag=args.getOptionValue('--tag'),path=args.getOptionValue('--path'))
        else:
            environ.build(tag="reversesium:v1",path=".")
    if args.hasOptions(['--help']) or args.hasOptions(['-h']):
        helpmessage()
    # Start a new session for reverse engineering
    if args.hasCommands(['startsession']):
        if args.hasOptions(['--session']) and args.hasOptions(['--host']) and args.hasOptions(['--network']) and args.hasOptions(['--username']):
            environ.start_session(sessionname=args.getOptionValue('--session'), hostname=args.getOptionValue('--host'),network=args.getOptionValue('--network'),username=args.getOptionValue('--username'))
        elif args.hasOptions(['--session']) and args.hasOptions(['--host']) and args.hasOptions(['--network']) and args.hasOptions(['--username']):
            environ.start_session(sessionname=args.getOptionValue('--session'), hostname=args.getOptionValue('--host'),network=args.getOptionValue('--network'),username=args.getOptionValue('--username'))
        else:
            print("\n[*] Missing options --session= --host= --network= --username")

    # Get the shell for the session
    elif args.hasCommands(['shell']):
        if args.hasOptions(['--session']) and args.hasOptions(['--username']):
            environ.spawn_shell(sessionname=args.getOptionValue('--session'),username=args.getOptionValue('--username'))
        elif args.hasOptions(['--session']):
            environ.spawn_shell(sessionname=args.getOptionValue('--session'),username="root")
        else:
            print("\n[*] Missing option --session= ")
    elif args.hasCommands(['stopsession']):
        if args.hasOptions(['--session']):
            environ.stop_session(sessionname=args.getOptionValue('--session'))
        else:
            print("\n[*] Missing option --session= ")
    elif args.hasCommands(['currentsession']):
        environ.current_sessions()
    elif args.hasCommands(['trace']):
        if args.hasOptions(['--cmd']):
            environ.tracer(cmd=args.getOptionValue('--cmd'))
        else:
            print("\n[*] Missing option --cmd=")